'use client';

import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Timer, Cookie, CheckCircle2, Sprout } from 'lucide-react';
import { TopNav } from '@/components/design-system/TopNav';
import { useLanguage } from '@/hooks/useLanguage';

const translations = {
  en: {
    subtitle: "A step-by-step guide to baking sourdough bread with intelligent timers, progress tracking, and bilingual support (English/Russian).",
    smartTimers: "Smart Timers",
    smartTimersDesc: "Automatic timers for each step with min/max duration ranges. Start, pause, and reset individual or all timers at once.",
    progressTracking: "Progress Tracking",
    progressTrackingDesc: "Your progress is automatically saved to localStorage. Continue where you left off even after closing your browser.",
    notifications: "Notifications",
    notificationsDesc: "Get toast popups, browser notifications, and a bell sound when timers complete so you never miss a step.",
    startBaking: "Start Baking",
    starterGuide: "Starter Guide",
    viewDashboard: "View Dashboard",
    tip: "Tip:",
    tipText: "Enable browser notifications for the best experience. You'll be prompted when you start your first timer."
  },
  ru: {
    subtitle: "–ü–æ—à–∞–≥–æ–≤–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –≤—ã–ø–µ—á–∫–µ —Ö–ª–µ–±–∞ –Ω–∞ –∑–∞–∫–≤–∞—Å–∫–µ —Å —É–º–Ω—ã–º–∏ —Ç–∞–π–º–µ—Ä–∞–º–∏, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –¥–≤—É—è–∑—ã—á–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π/—Ä—É—Å—Å–∫–∏–π).",
    smartTimers: "–£–º–Ω—ã–µ –¢–∞–π–º–µ—Ä—ã",
    smartTimersDesc: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–∞–π–º–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π/–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é. –ó–∞–ø—É—Å–∫–∞–π—Ç–µ, —Å—Ç–∞–≤—å—Ç–µ –Ω–∞ –ø–∞—É–∑—É –∏ —Å–±—Ä–∞—Å—ã–≤–∞–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∏–ª–∏ –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã —Å—Ä–∞–∑—É.",
    progressTracking: "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ü—Ä–æ–≥—Ä–µ—Å—Å–∞",
    progressTrackingDesc: "–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ localStorage. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å, –¥–∞–∂–µ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞.",
    notifications: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
    notificationsDesc: "–ü–æ–ª—É—á–∞–π—Ç–µ –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –∑–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–æ–≤, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞.",
    startBaking: "–ù–∞—á–∞—Ç—å –í—ã–ø–µ—á–∫—É",
    starterGuide: "–ì–∏–¥ –ø–æ –ó–∞–∫–≤–∞—Å–∫–µ",
    viewDashboard: "–ü–∞–Ω–µ–ª—å –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
    tip: "–°–æ–≤–µ—Ç:",
    tipText: "–í–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–ø—ã—Ç–∞. –í–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ —ç—Ç–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–µ—Ä–≤–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞."
  }
};

/**
 * Landing page - welcome screen with recipe overview
 */
export default function HomePage() {
  const router = useRouter();
  const { language } = useLanguage();
  const t = translations[language];
  
  return (
    <div className="min-h-screen bg-gradient-to-br from-amber-50 via-white to-orange-50">
      <TopNav />
      
      <div className="container mx-auto px-4 py-16 max-w-4xl">
        <div className="text-center mb-12">
          <div className="flex justify-center mb-6">
            <div className="rounded-full bg-amber-100 p-6">
              <Cookie className="h-16 w-16 text-amber-700" />
            </div>
          </div>

          <div className="text-center space-y-4">
            <h1 className="text-5xl font-bold text-gray-900 animate-fade-in">
              Dope Dough
            </h1>
            <p className="text-lg text-gray-600 max-w-2xl mx-auto">
              {t.subtitle}
            </p>
          </div>
        </div>

        <div className="grid md:grid-cols-3 gap-6 mb-12">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-lg">
                <Timer className="h-5 w-5 text-blue-600" />
                {t.smartTimers}
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-gray-600">
                {t.smartTimersDesc}
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-lg">
                <CheckCircle2 className="h-5 w-5 text-green-600" />
                {t.progressTracking}
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-gray-600">
                {t.progressTrackingDesc}
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-lg">
                <span className="text-xl">üîî</span>
                {t.notifications}
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-gray-600">
                {t.notificationsDesc}
              </p>
            </CardContent>
          </Card>
        </div>

        <div className="text-center space-y-4">
          <Link href="/recipe">
            <Button size="lg" className="text-lg px-8 py-6">
              {t.startBaking}
              <Cookie className="ml-2 h-5 w-5" />
            </Button>
          </Link>
          
          <div className="flex flex-col sm:flex-row gap-3 justify-center">
            <Link href="/dashboard/starter-guide">
              <Button variant="outline" size="lg" className="gap-2 text-base px-6 py-4 rounded-xl border-2 border-secondary-300 hover:bg-secondary-50 hover:border-secondary-400 hover:scale-[1.02] active:scale-[0.98] transition-all">
                <Sprout className="h-5 w-5" />
                {t.starterGuide}
              </Button>
            </Link>
            
            <Link href="/dashboard">
              <Button variant="outline" size="lg" className="text-base px-6 py-4 rounded-xl border-2 border-primary-300 hover:bg-primary-50 hover:border-primary-400 hover:scale-[1.02] active:scale-[0.98] transition-all">
                {t.viewDashboard}
              </Button>
            </Link>
          </div>
        </div>

        <div className="mt-12 text-center text-sm text-gray-500">
          <p>
            <strong>{t.tip}</strong> {t.tipText}
          </p>
        </div>
      </div>
    </div>
  );
}
